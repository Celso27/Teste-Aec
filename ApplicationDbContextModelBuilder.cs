// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace ProjetoBusca.Data.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var curso = CursoEntityType.Create(this);

            CursoEntityType.CreateAnnotations(curso);

            AddAnnotation("ProductVersion", "8.0.10");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var curso = FindEntityType("Curso")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            curso.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var cursoTableBase = new TableBase("Curso", null, relationalModel);
            var cargaHorariaColumnBase = new ColumnBase<ColumnMappingBase>("CargaHoraria", "TEXT", cursoTableBase)
            {
                IsNullable = true
            };
            cursoTableBase.Columns.Add("CargaHoraria", cargaHorariaColumnBase);
            var descricaoColumnBase = new ColumnBase<ColumnMappingBase>("Descricao", "TEXT", cursoTableBase)
            {
                IsNullable = true
            };
            cursoTableBase.Columns.Add("Descricao", descricaoColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", cursoTableBase);
            cursoTableBase.Columns.Add("Id", idColumnBase);
            var professorColumnBase = new ColumnBase<ColumnMappingBase>("Professor", "TEXT", cursoTableBase)
            {
                IsNullable = true
            };
            cursoTableBase.Columns.Add("Professor", professorColumnBase);
            var tituloColumnBase = new ColumnBase<ColumnMappingBase>("Titulo", "TEXT", cursoTableBase)
            {
                IsNullable = true
            };
            cursoTableBase.Columns.Add("Titulo", tituloColumnBase);
            relationalModel.DefaultTables.Add("Curso", cursoTableBase);
            var cursoMappingBase = new TableMappingBase<ColumnMappingBase>(curso, cursoTableBase, true);
            cursoTableBase.AddTypeMapping(cursoMappingBase, false);
            defaultTableMappings.Add(cursoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, curso.FindProperty("Id")!, cursoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cargaHorariaColumnBase, curso.FindProperty("CargaHoraria")!, cursoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descricaoColumnBase, curso.FindProperty("Descricao")!, cursoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)professorColumnBase, curso.FindProperty("Professor")!, cursoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tituloColumnBase, curso.FindProperty("Titulo")!, cursoMappingBase);

            var tableMappings = new List<TableMapping>();
            curso.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var cursosTable = new Table("Cursos", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", cursosTable);
            cursosTable.Columns.Add("Id", idColumn);
            var cargaHorariaColumn = new Column("CargaHoraria", "TEXT", cursosTable)
            {
                IsNullable = true
            };
            cursosTable.Columns.Add("CargaHoraria", cargaHorariaColumn);
            var descricaoColumn = new Column("Descricao", "TEXT", cursosTable)
            {
                IsNullable = true
            };
            cursosTable.Columns.Add("Descricao", descricaoColumn);
            var professorColumn = new Column("Professor", "TEXT", cursosTable)
            {
                IsNullable = true
            };
            cursosTable.Columns.Add("Professor", professorColumn);
            var tituloColumn = new Column("Titulo", "TEXT", cursosTable)
            {
                IsNullable = true
            };
            cursosTable.Columns.Add("Titulo", tituloColumn);
            var pK_Cursos = new UniqueConstraint("PK_Cursos", cursosTable, new[] { idColumn });
            cursosTable.PrimaryKey = pK_Cursos;
            var pK_CursosUc = RelationalModel.GetKey(this,
                "Curso",
                new[] { "Id" });
            pK_Cursos.MappedKeys.Add(pK_CursosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CursosUc).Add(pK_Cursos);
            cursosTable.UniqueConstraints.Add("PK_Cursos", pK_Cursos);
            relationalModel.Tables.Add(("Cursos", null), cursosTable);
            var cursosTableMapping = new TableMapping(curso, cursosTable, true);
            cursosTable.AddTypeMapping(cursosTableMapping, false);
            tableMappings.Add(cursosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, curso.FindProperty("Id")!, cursosTableMapping);
            RelationalModel.CreateColumnMapping(cargaHorariaColumn, curso.FindProperty("CargaHoraria")!, cursosTableMapping);
            RelationalModel.CreateColumnMapping(descricaoColumn, curso.FindProperty("Descricao")!, cursosTableMapping);
            RelationalModel.CreateColumnMapping(professorColumn, curso.FindProperty("Professor")!, cursosTableMapping);
            RelationalModel.CreateColumnMapping(tituloColumn, curso.FindProperty("Titulo")!, cursosTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
